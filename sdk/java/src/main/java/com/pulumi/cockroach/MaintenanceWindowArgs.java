// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class MaintenanceWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowArgs Empty = new MaintenanceWindowArgs();

    /**
     * Cluster ID.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return Cluster ID.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
     * 
     */
    @Import(name="offsetDuration", required=true)
    private Output<Integer> offsetDuration;

    /**
     * @return Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
     * 
     */
    public Output<Integer> offsetDuration() {
        return this.offsetDuration;
    }

    /**
     * Duration in seconds that the maintenance window will remain active for after it starts.
     * 
     */
    @Import(name="windowDuration", required=true)
    private Output<Integer> windowDuration;

    /**
     * @return Duration in seconds that the maintenance window will remain active for after it starts.
     * 
     */
    public Output<Integer> windowDuration() {
        return this.windowDuration;
    }

    private MaintenanceWindowArgs() {}

    private MaintenanceWindowArgs(MaintenanceWindowArgs $) {
        this.clusterId = $.clusterId;
        this.offsetDuration = $.offsetDuration;
        this.windowDuration = $.windowDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowArgs $;

        public Builder() {
            $ = new MaintenanceWindowArgs();
        }

        public Builder(MaintenanceWindowArgs defaults) {
            $ = new MaintenanceWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param offsetDuration Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
         * 
         * @return builder
         * 
         */
        public Builder offsetDuration(Output<Integer> offsetDuration) {
            $.offsetDuration = offsetDuration;
            return this;
        }

        /**
         * @param offsetDuration Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
         * 
         * @return builder
         * 
         */
        public Builder offsetDuration(Integer offsetDuration) {
            return offsetDuration(Output.of(offsetDuration));
        }

        /**
         * @param windowDuration Duration in seconds that the maintenance window will remain active for after it starts.
         * 
         * @return builder
         * 
         */
        public Builder windowDuration(Output<Integer> windowDuration) {
            $.windowDuration = windowDuration;
            return this;
        }

        /**
         * @param windowDuration Duration in seconds that the maintenance window will remain active for after it starts.
         * 
         * @return builder
         * 
         */
        public Builder windowDuration(Integer windowDuration) {
            return windowDuration(Output.of(windowDuration));
        }

        public MaintenanceWindowArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.offsetDuration = Objects.requireNonNull($.offsetDuration, "expected parameter 'offsetDuration' to be non-null");
            $.windowDuration = Objects.requireNonNull($.windowDuration, "expected parameter 'windowDuration' to be non-null");
            return $;
        }
    }

}
