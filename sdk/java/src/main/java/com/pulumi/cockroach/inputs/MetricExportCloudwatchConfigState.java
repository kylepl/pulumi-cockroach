// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricExportCloudwatchConfigState extends com.pulumi.resources.ResourceArgs {

    public static final MetricExportCloudwatchConfigState Empty = new MetricExportCloudwatchConfigState();

    /**
     * Cluster ID
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return Cluster ID
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The customized AWS CloudWatch log group name.
     * 
     */
    @Import(name="logGroupName")
    private @Nullable Output<String> logGroupName;

    /**
     * @return The customized AWS CloudWatch log group name.
     * 
     */
    public Optional<Output<String>> logGroupName() {
        return Optional.ofNullable(this.logGroupName);
    }

    /**
     * The IAM role used to upload metric segments to the target AWS account.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The IAM role used to upload metric segments to the target AWS account.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The specific AWS region that the metrics will be exported to.
     * 
     */
    @Import(name="targetRegion")
    private @Nullable Output<String> targetRegion;

    /**
     * @return The specific AWS region that the metrics will be exported to.
     * 
     */
    public Optional<Output<String>> targetRegion() {
        return Optional.ofNullable(this.targetRegion);
    }

    @Import(name="userMessage")
    private @Nullable Output<String> userMessage;

    public Optional<Output<String>> userMessage() {
        return Optional.ofNullable(this.userMessage);
    }

    private MetricExportCloudwatchConfigState() {}

    private MetricExportCloudwatchConfigState(MetricExportCloudwatchConfigState $) {
        this.clusterId = $.clusterId;
        this.logGroupName = $.logGroupName;
        this.roleArn = $.roleArn;
        this.status = $.status;
        this.targetRegion = $.targetRegion;
        this.userMessage = $.userMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricExportCloudwatchConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricExportCloudwatchConfigState $;

        public Builder() {
            $ = new MetricExportCloudwatchConfigState();
        }

        public Builder(MetricExportCloudwatchConfigState defaults) {
            $ = new MetricExportCloudwatchConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param logGroupName The customized AWS CloudWatch log group name.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(@Nullable Output<String> logGroupName) {
            $.logGroupName = logGroupName;
            return this;
        }

        /**
         * @param logGroupName The customized AWS CloudWatch log group name.
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(String logGroupName) {
            return logGroupName(Output.of(logGroupName));
        }

        /**
         * @param roleArn The IAM role used to upload metric segments to the target AWS account.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The IAM role used to upload metric segments to the target AWS account.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param targetRegion The specific AWS region that the metrics will be exported to.
         * 
         * @return builder
         * 
         */
        public Builder targetRegion(@Nullable Output<String> targetRegion) {
            $.targetRegion = targetRegion;
            return this;
        }

        /**
         * @param targetRegion The specific AWS region that the metrics will be exported to.
         * 
         * @return builder
         * 
         */
        public Builder targetRegion(String targetRegion) {
            return targetRegion(Output.of(targetRegion));
        }

        public Builder userMessage(@Nullable Output<String> userMessage) {
            $.userMessage = userMessage;
            return this;
        }

        public Builder userMessage(String userMessage) {
            return userMessage(Output.of(userMessage));
        }

        public MetricExportCloudwatchConfigState build() {
            return $;
        }
    }

}
