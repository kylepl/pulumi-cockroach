// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach.outputs;

import com.pulumi.cockroach.outputs.GetConnectionStringConnectionParams;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionStringResult {
    private GetConnectionStringConnectionParams connectionParams;
    private String connectionString;
    private String database;
    private String id;
    private String os;
    private @Nullable String password;
    private @Nullable String sqlUser;

    private GetConnectionStringResult() {}
    public GetConnectionStringConnectionParams connectionParams() {
        return this.connectionParams;
    }
    public String connectionString() {
        return this.connectionString;
    }
    public String database() {
        return this.database;
    }
    public String id() {
        return this.id;
    }
    public String os() {
        return this.os;
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<String> sqlUser() {
        return Optional.ofNullable(this.sqlUser);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionStringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetConnectionStringConnectionParams connectionParams;
        private String connectionString;
        private String database;
        private String id;
        private String os;
        private @Nullable String password;
        private @Nullable String sqlUser;
        public Builder() {}
        public Builder(GetConnectionStringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionParams = defaults.connectionParams;
    	      this.connectionString = defaults.connectionString;
    	      this.database = defaults.database;
    	      this.id = defaults.id;
    	      this.os = defaults.os;
    	      this.password = defaults.password;
    	      this.sqlUser = defaults.sqlUser;
        }

        @CustomType.Setter
        public Builder connectionParams(GetConnectionStringConnectionParams connectionParams) {
            this.connectionParams = Objects.requireNonNull(connectionParams);
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            this.os = Objects.requireNonNull(os);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sqlUser(@Nullable String sqlUser) {
            this.sqlUser = sqlUser;
            return this;
        }
        public GetConnectionStringResult build() {
            final var o = new GetConnectionStringResult();
            o.connectionParams = connectionParams;
            o.connectionString = connectionString;
            o.database = database;
            o.id = id;
            o.os = os;
            o.password = password;
            o.sqlUser = sqlUser;
            return o;
        }
    }
}
