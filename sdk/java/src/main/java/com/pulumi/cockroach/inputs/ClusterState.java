// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach.inputs;

import com.pulumi.cockroach.inputs.ClusterDedicatedArgs;
import com.pulumi.cockroach.inputs.ClusterRegionArgs;
import com.pulumi.cockroach.inputs.ClusterServerlessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="cloudProvider")
    private @Nullable Output<String> cloudProvider;

    public Optional<Output<String>> cloudProvider() {
        return Optional.ofNullable(this.cloudProvider);
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of this resource.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    @Import(name="cockroachVersion")
    private @Nullable Output<String> cockroachVersion;

    public Optional<Output<String>> cockroachVersion() {
        return Optional.ofNullable(this.cockroachVersion);
    }

    @Import(name="creatorId")
    private @Nullable Output<String> creatorId;

    public Optional<Output<String>> creatorId() {
        return Optional.ofNullable(this.creatorId);
    }

    @Import(name="dedicated")
    private @Nullable Output<ClusterDedicatedArgs> dedicated;

    public Optional<Output<ClusterDedicatedArgs>> dedicated() {
        return Optional.ofNullable(this.dedicated);
    }

    /**
     * Name of cluster
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of cluster
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="operationStatus")
    private @Nullable Output<String> operationStatus;

    public Optional<Output<String>> operationStatus() {
        return Optional.ofNullable(this.operationStatus);
    }

    @Import(name="plan")
    private @Nullable Output<String> plan;

    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    @Import(name="regions")
    private @Nullable Output<List<ClusterRegionArgs>> regions;

    public Optional<Output<List<ClusterRegionArgs>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    @Import(name="serverless")
    private @Nullable Output<ClusterServerlessArgs> serverless;

    public Optional<Output<ClusterServerlessArgs>> serverless() {
        return Optional.ofNullable(this.serverless);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="upgradeStatus")
    private @Nullable Output<String> upgradeStatus;

    public Optional<Output<String>> upgradeStatus() {
        return Optional.ofNullable(this.upgradeStatus);
    }

    private ClusterState() {}

    private ClusterState(ClusterState $) {
        this.accountId = $.accountId;
        this.cloudProvider = $.cloudProvider;
        this.clusterId = $.clusterId;
        this.cockroachVersion = $.cockroachVersion;
        this.creatorId = $.creatorId;
        this.dedicated = $.dedicated;
        this.name = $.name;
        this.operationStatus = $.operationStatus;
        this.plan = $.plan;
        this.regions = $.regions;
        this.serverless = $.serverless;
        this.state = $.state;
        this.upgradeStatus = $.upgradeStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterState $;

        public Builder() {
            $ = new ClusterState();
        }

        public Builder(ClusterState defaults) {
            $ = new ClusterState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder cloudProvider(@Nullable Output<String> cloudProvider) {
            $.cloudProvider = cloudProvider;
            return this;
        }

        public Builder cloudProvider(String cloudProvider) {
            return cloudProvider(Output.of(cloudProvider));
        }

        /**
         * @param clusterId The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public Builder cockroachVersion(@Nullable Output<String> cockroachVersion) {
            $.cockroachVersion = cockroachVersion;
            return this;
        }

        public Builder cockroachVersion(String cockroachVersion) {
            return cockroachVersion(Output.of(cockroachVersion));
        }

        public Builder creatorId(@Nullable Output<String> creatorId) {
            $.creatorId = creatorId;
            return this;
        }

        public Builder creatorId(String creatorId) {
            return creatorId(Output.of(creatorId));
        }

        public Builder dedicated(@Nullable Output<ClusterDedicatedArgs> dedicated) {
            $.dedicated = dedicated;
            return this;
        }

        public Builder dedicated(ClusterDedicatedArgs dedicated) {
            return dedicated(Output.of(dedicated));
        }

        /**
         * @param name Name of cluster
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of cluster
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operationStatus(@Nullable Output<String> operationStatus) {
            $.operationStatus = operationStatus;
            return this;
        }

        public Builder operationStatus(String operationStatus) {
            return operationStatus(Output.of(operationStatus));
        }

        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        public Builder regions(@Nullable Output<List<ClusterRegionArgs>> regions) {
            $.regions = regions;
            return this;
        }

        public Builder regions(List<ClusterRegionArgs> regions) {
            return regions(Output.of(regions));
        }

        public Builder regions(ClusterRegionArgs... regions) {
            return regions(List.of(regions));
        }

        public Builder serverless(@Nullable Output<ClusterServerlessArgs> serverless) {
            $.serverless = serverless;
            return this;
        }

        public Builder serverless(ClusterServerlessArgs serverless) {
            return serverless(Output.of(serverless));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder upgradeStatus(@Nullable Output<String> upgradeStatus) {
            $.upgradeStatus = upgradeStatus;
            return this;
        }

        public Builder upgradeStatus(String upgradeStatus) {
            return upgradeStatus(Output.of(upgradeStatus));
        }

        public ClusterState build() {
            return $;
        }
    }

}
