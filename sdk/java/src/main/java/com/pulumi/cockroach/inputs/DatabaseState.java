// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * ID of the cluster the database belongs to.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return ID of the cluster the database belongs to.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Database name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Database name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of tables in the database.
     * 
     */
    @Import(name="tableCount")
    private @Nullable Output<Integer> tableCount;

    /**
     * @return Number of tables in the database.
     * 
     */
    public Optional<Output<Integer>> tableCount() {
        return Optional.ofNullable(this.tableCount);
    }

    private DatabaseState() {}

    private DatabaseState(DatabaseState $) {
        this.clusterId = $.clusterId;
        this.name = $.name;
        this.tableCount = $.tableCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseState $;

        public Builder() {
            $ = new DatabaseState();
        }

        public Builder(DatabaseState defaults) {
            $ = new DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId ID of the cluster the database belongs to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId ID of the cluster the database belongs to.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param name Database name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Database name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tableCount Number of tables in the database.
         * 
         * @return builder
         * 
         */
        public Builder tableCount(@Nullable Output<Integer> tableCount) {
            $.tableCount = tableCount;
            return this;
        }

        /**
         * @param tableCount Number of tables in the database.
         * 
         * @return builder
         * 
         */
        public Builder tableCount(Integer tableCount) {
            return tableCount(Output.of(tableCount));
        }

        public DatabaseState build() {
            return $;
        }
    }

}
