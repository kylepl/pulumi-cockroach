// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach;

import com.pulumi.cockroach.inputs.ApiOidcConfigIdentityMapArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiOidcConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiOidcConfigArgs Empty = new ApiOidcConfigArgs();

    /**
     * The audience that CC API should accept for this API OIDC Configuration.
     * 
     */
    @Import(name="audience", required=true)
    private Output<String> audience;

    /**
     * @return The audience that CC API should accept for this API OIDC Configuration.
     * 
     */
    public Output<String> audience() {
        return this.audience;
    }

    /**
     * The JWT claim that should be used as the user identifier. Defaults to the subject.
     * 
     */
    @Import(name="claim")
    private @Nullable Output<String> claim;

    /**
     * @return The JWT claim that should be used as the user identifier. Defaults to the subject.
     * 
     */
    public Optional<Output<String>> claim() {
        return Optional.ofNullable(this.claim);
    }

    /**
     * The mapping rules to convert token user identifiers into a new form.
     * 
     */
    @Import(name="identityMaps")
    private @Nullable Output<List<ApiOidcConfigIdentityMapArgs>> identityMaps;

    /**
     * @return The mapping rules to convert token user identifiers into a new form.
     * 
     */
    public Optional<Output<List<ApiOidcConfigIdentityMapArgs>>> identityMaps() {
        return Optional.ofNullable(this.identityMaps);
    }

    /**
     * The issuer of tokens for the API OIDC Configuration. Usually this is a url.
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return The issuer of tokens for the API OIDC Configuration. Usually this is a url.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The JSON Web Key Set used to check the signature of the JWTs.
     * 
     */
    @Import(name="jwks", required=true)
    private Output<String> jwks;

    /**
     * @return The JSON Web Key Set used to check the signature of the JWTs.
     * 
     */
    public Output<String> jwks() {
        return this.jwks;
    }

    private ApiOidcConfigArgs() {}

    private ApiOidcConfigArgs(ApiOidcConfigArgs $) {
        this.audience = $.audience;
        this.claim = $.claim;
        this.identityMaps = $.identityMaps;
        this.issuer = $.issuer;
        this.jwks = $.jwks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiOidcConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiOidcConfigArgs $;

        public Builder() {
            $ = new ApiOidcConfigArgs();
        }

        public Builder(ApiOidcConfigArgs defaults) {
            $ = new ApiOidcConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audience The audience that CC API should accept for this API OIDC Configuration.
         * 
         * @return builder
         * 
         */
        public Builder audience(Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience The audience that CC API should accept for this API OIDC Configuration.
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param claim The JWT claim that should be used as the user identifier. Defaults to the subject.
         * 
         * @return builder
         * 
         */
        public Builder claim(@Nullable Output<String> claim) {
            $.claim = claim;
            return this;
        }

        /**
         * @param claim The JWT claim that should be used as the user identifier. Defaults to the subject.
         * 
         * @return builder
         * 
         */
        public Builder claim(String claim) {
            return claim(Output.of(claim));
        }

        /**
         * @param identityMaps The mapping rules to convert token user identifiers into a new form.
         * 
         * @return builder
         * 
         */
        public Builder identityMaps(@Nullable Output<List<ApiOidcConfigIdentityMapArgs>> identityMaps) {
            $.identityMaps = identityMaps;
            return this;
        }

        /**
         * @param identityMaps The mapping rules to convert token user identifiers into a new form.
         * 
         * @return builder
         * 
         */
        public Builder identityMaps(List<ApiOidcConfigIdentityMapArgs> identityMaps) {
            return identityMaps(Output.of(identityMaps));
        }

        /**
         * @param identityMaps The mapping rules to convert token user identifiers into a new form.
         * 
         * @return builder
         * 
         */
        public Builder identityMaps(ApiOidcConfigIdentityMapArgs... identityMaps) {
            return identityMaps(List.of(identityMaps));
        }

        /**
         * @param issuer The issuer of tokens for the API OIDC Configuration. Usually this is a url.
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer of tokens for the API OIDC Configuration. Usually this is a url.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param jwks The JSON Web Key Set used to check the signature of the JWTs.
         * 
         * @return builder
         * 
         */
        public Builder jwks(Output<String> jwks) {
            $.jwks = jwks;
            return this;
        }

        /**
         * @param jwks The JSON Web Key Set used to check the signature of the JWTs.
         * 
         * @return builder
         * 
         */
        public Builder jwks(String jwks) {
            return jwks(Output.of(jwks));
        }

        public ApiOidcConfigArgs build() {
            $.audience = Objects.requireNonNull($.audience, "expected parameter 'audience' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.jwks = Objects.requireNonNull($.jwks, "expected parameter 'jwks' to be non-null");
            return $;
        }
    }

}
