// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach;

import com.pulumi.cockroach.inputs.ClusterDedicatedArgs;
import com.pulumi.cockroach.inputs.ClusterRegionArgs;
import com.pulumi.cockroach.inputs.ClusterServerlessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Cloud provider used to host the cluster. Allowed values are: * GCP * AWS * AZURE
     * 
     */
    @Import(name="cloudProvider", required=true)
    private Output<String> cloudProvider;

    /**
     * @return Cloud provider used to host the cluster. Allowed values are: * GCP * AWS * AZURE
     * 
     */
    public Output<String> cloudProvider() {
        return this.cloudProvider;
    }

    /**
     * Major version of CockroachDB running on the cluster.
     * 
     */
    @Import(name="cockroachVersion")
    private @Nullable Output<String> cockroachVersion;

    /**
     * @return Major version of CockroachDB running on the cluster.
     * 
     */
    public Optional<Output<String>> cockroachVersion() {
        return Optional.ofNullable(this.cockroachVersion);
    }

    @Import(name="dedicated")
    private @Nullable Output<ClusterDedicatedArgs> dedicated;

    public Optional<Output<ClusterDedicatedArgs>> dedicated() {
        return Optional.ofNullable(this.dedicated);
    }

    /**
     * Name of the cluster.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the cluster&#39;s parent folder. &#39;root&#39; is used for a cluster at the root level.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the cluster&#39;s parent folder. &#39;root&#39; is used for a cluster at the root level.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    @Import(name="regions", required=true)
    private Output<List<ClusterRegionArgs>> regions;

    public Output<List<ClusterRegionArgs>> regions() {
        return this.regions;
    }

    @Import(name="serverless")
    private @Nullable Output<ClusterServerlessArgs> serverless;

    public Optional<Output<ClusterServerlessArgs>> serverless() {
        return Optional.ofNullable(this.serverless);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.cloudProvider = $.cloudProvider;
        this.cockroachVersion = $.cockroachVersion;
        this.dedicated = $.dedicated;
        this.name = $.name;
        this.parentId = $.parentId;
        this.regions = $.regions;
        this.serverless = $.serverless;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudProvider Cloud provider used to host the cluster. Allowed values are: * GCP * AWS * AZURE
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(Output<String> cloudProvider) {
            $.cloudProvider = cloudProvider;
            return this;
        }

        /**
         * @param cloudProvider Cloud provider used to host the cluster. Allowed values are: * GCP * AWS * AZURE
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(String cloudProvider) {
            return cloudProvider(Output.of(cloudProvider));
        }

        /**
         * @param cockroachVersion Major version of CockroachDB running on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder cockroachVersion(@Nullable Output<String> cockroachVersion) {
            $.cockroachVersion = cockroachVersion;
            return this;
        }

        /**
         * @param cockroachVersion Major version of CockroachDB running on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder cockroachVersion(String cockroachVersion) {
            return cockroachVersion(Output.of(cockroachVersion));
        }

        public Builder dedicated(@Nullable Output<ClusterDedicatedArgs> dedicated) {
            $.dedicated = dedicated;
            return this;
        }

        public Builder dedicated(ClusterDedicatedArgs dedicated) {
            return dedicated(Output.of(dedicated));
        }

        /**
         * @param name Name of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The ID of the cluster&#39;s parent folder. &#39;root&#39; is used for a cluster at the root level.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the cluster&#39;s parent folder. &#39;root&#39; is used for a cluster at the root level.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        public Builder regions(Output<List<ClusterRegionArgs>> regions) {
            $.regions = regions;
            return this;
        }

        public Builder regions(List<ClusterRegionArgs> regions) {
            return regions(Output.of(regions));
        }

        public Builder regions(ClusterRegionArgs... regions) {
            return regions(List.of(regions));
        }

        public Builder serverless(@Nullable Output<ClusterServerlessArgs> serverless) {
            $.serverless = serverless;
            return this;
        }

        public Builder serverless(ClusterServerlessArgs serverless) {
            return serverless(Output.of(serverless));
        }

        public ClusterArgs build() {
            $.cloudProvider = Objects.requireNonNull($.cloudProvider, "expected parameter 'cloudProvider' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.regions = Objects.requireNonNull($.regions, "expected parameter 'regions' to be non-null");
            return $;
        }
    }

}
