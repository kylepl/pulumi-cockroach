// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cockroach.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiOidcConfigIdentityMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiOidcConfigIdentityMapArgs Empty = new ApiOidcConfigIdentityMapArgs();

    /**
     * The username (email or service account id) of the CC user that the token should map to.
     * 
     */
    @Import(name="ccIdentity", required=true)
    private Output<String> ccIdentity;

    /**
     * @return The username (email or service account id) of the CC user that the token should map to.
     * 
     */
    public Output<String> ccIdentity() {
        return this.ccIdentity;
    }

    /**
     * Indicates that the token_principal field is a regex value.
     * 
     */
    @Import(name="isRegex")
    private @Nullable Output<Boolean> isRegex;

    /**
     * @return Indicates that the token_principal field is a regex value.
     * 
     */
    public Optional<Output<Boolean>> isRegex() {
        return Optional.ofNullable(this.isRegex);
    }

    /**
     * The token value that needs to be mapped.
     * 
     */
    @Import(name="tokenIdentity", required=true)
    private Output<String> tokenIdentity;

    /**
     * @return The token value that needs to be mapped.
     * 
     */
    public Output<String> tokenIdentity() {
        return this.tokenIdentity;
    }

    private ApiOidcConfigIdentityMapArgs() {}

    private ApiOidcConfigIdentityMapArgs(ApiOidcConfigIdentityMapArgs $) {
        this.ccIdentity = $.ccIdentity;
        this.isRegex = $.isRegex;
        this.tokenIdentity = $.tokenIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiOidcConfigIdentityMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiOidcConfigIdentityMapArgs $;

        public Builder() {
            $ = new ApiOidcConfigIdentityMapArgs();
        }

        public Builder(ApiOidcConfigIdentityMapArgs defaults) {
            $ = new ApiOidcConfigIdentityMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ccIdentity The username (email or service account id) of the CC user that the token should map to.
         * 
         * @return builder
         * 
         */
        public Builder ccIdentity(Output<String> ccIdentity) {
            $.ccIdentity = ccIdentity;
            return this;
        }

        /**
         * @param ccIdentity The username (email or service account id) of the CC user that the token should map to.
         * 
         * @return builder
         * 
         */
        public Builder ccIdentity(String ccIdentity) {
            return ccIdentity(Output.of(ccIdentity));
        }

        /**
         * @param isRegex Indicates that the token_principal field is a regex value.
         * 
         * @return builder
         * 
         */
        public Builder isRegex(@Nullable Output<Boolean> isRegex) {
            $.isRegex = isRegex;
            return this;
        }

        /**
         * @param isRegex Indicates that the token_principal field is a regex value.
         * 
         * @return builder
         * 
         */
        public Builder isRegex(Boolean isRegex) {
            return isRegex(Output.of(isRegex));
        }

        /**
         * @param tokenIdentity The token value that needs to be mapped.
         * 
         * @return builder
         * 
         */
        public Builder tokenIdentity(Output<String> tokenIdentity) {
            $.tokenIdentity = tokenIdentity;
            return this;
        }

        /**
         * @param tokenIdentity The token value that needs to be mapped.
         * 
         * @return builder
         * 
         */
        public Builder tokenIdentity(String tokenIdentity) {
            return tokenIdentity(Output.of(tokenIdentity));
        }

        public ApiOidcConfigIdentityMapArgs build() {
            $.ccIdentity = Objects.requireNonNull($.ccIdentity, "expected parameter 'ccIdentity' to be non-null");
            $.tokenIdentity = Objects.requireNonNull($.tokenIdentity, "expected parameter 'tokenIdentity' to be non-null");
            return $;
        }
    }

}
